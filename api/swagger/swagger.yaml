basePath: /api/v1
definitions:
  api.Error:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: invalid request
        type: string
    type: object
  dto.CreateSongRequest:
    properties:
      group_title:
        maxLength: 255
        minLength: 1
        type: string
      link:
        type: string
      release_date:
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
      verses:
        items:
          $ref: '#/definitions/dto.VerseInput'
        type: array
    required:
    - group_title
    - title
    type: object
  dto.LibraryResponse:
    properties:
      songs:
        items:
          $ref: '#/definitions/dto.SongResponse'
        type: array
      total:
        type: integer
    type: object
  dto.SongResponse:
    properties:
      group:
        type: string
      id:
        type: integer
      link:
        type: string
      release_date:
        type: string
      title:
        type: string
    type: object
  dto.UpdateSongRequest:
    properties:
      group_id:
        type: integer
      group_title:
        maxLength: 255
        minLength: 1
        type: string
      link:
        type: string
      release_date:
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
    type: object
  dto.VerseInput:
    properties:
      text:
        type: string
      verse_number:
        minimum: 1
        type: integer
    required:
    - text
    - verse_number
    type: object
  dto.VerseResponse:
    properties:
      id:
        type: integer
      song_id:
        type: integer
      text:
        type: string
      verse_number:
        type: integer
    type: object
  dto.VersesResponse:
    properties:
      total:
        type: integer
      verses:
        items:
          $ref: '#/definitions/dto.VerseResponse'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для работы с музыкальной библиотекой
  title: Music Library API
  version: "1.0"
paths:
  /songs:
    get:
      consumes:
      - application/json
      description: Получение списка песен с фильтрацией и пагинацией
      parameters:
      - description: Фильтр по названию группы
        in: query
        name: group
        type: string
      - description: Фильтр по названию песни
        in: query
        name: song
        type: string
      - description: Количество записей на странице (по умолчанию 10)
        in: query
        name: limit
        type: integer
      - description: Смещение (по умолчанию 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LibraryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Получение списка песен
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: Добавление новой песни с куплетами
      parameters:
      - description: Данные новой песни
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSongRequest'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданной песни
          schema:
            type: integer
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Группа не найдена
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/api.Error'
      summary: Создание новой песни
      tags:
      - songs
  /songs/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление песни по ID
      parameters:
      - description: ID песни
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Песня не найдена
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/api.Error'
      summary: Удаление песни
      tags:
      - songs
    put:
      consumes:
      - application/json
      description: Изменение данных песни
      parameters:
      - description: ID песни
        in: path
        name: id
        required: true
        type: integer
      - description: Новые данные песни
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSongRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Песня не найдена
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/api.Error'
      summary: Обновление песни
      tags:
      - songs
  /songs/{id}/verses:
    get:
      consumes:
      - application/json
      description: Получение текста песни с пагинацией по куплетам
      parameters:
      - description: ID песни
        in: path
        name: id
        required: true
        type: integer
      - description: Количество куплетов на странице (по умолчанию 10)
        in: query
        name: limit
        type: integer
      - description: Смещение (по умолчанию 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: total и verses
          schema:
            $ref: '#/definitions/dto.VersesResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Песня не найдена
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/api.Error'
      summary: Получение куплетов песни
      tags:
      - verses
schemes:
- http
swagger: "2.0"
